package com.example.studenttaskmanager

import android.content.Context
import androidx.core.content.ContextCompat
import androidx.room.ColumnInfo
import androidx.room.Entity
import androidx.room.PrimaryKey
import java.time.LocalDate
import java.time.LocalTime
import java.time.format.DateTimeFormatter
import java.util.*
//Create a data class to hold the data for each task element. This class will be used to create the database table.
@Entity(tableName = "task_item_table")
class TaskItemModel(
    @ColumnInfo(name = "name") var name: String,
    @ColumnInfo(name = "desc") var desc: String,
    //Cant store LocalTime in Room, so we store it as a string instead and convert it back to LocalTime when we need it
    @ColumnInfo(name = "dueTimeString") var dueTimeString: String?,
    @ColumnInfo(name = "completedDateString") var completedDateString: String?,
    //The id is automatically generated by Room when we insert the item into the database
    @PrimaryKey(autoGenerate = true) var id: Int = 0
)
{
    private fun completedDate(): LocalDate? = if (completedDateString == null) null else LocalDate.parse(completedDateString, dateFormatter)
    fun dueTime(): LocalTime? = if (dueTimeString == null) null else LocalTime.parse(dueTimeString, timeFormatter)

    fun isCompleted() = completedDate() != null
    // if the task is completed, return the checked image, otherwise return the unchecked image
    fun imageResource(): Int = if(isCompleted()) R.drawable.ic_baseline_check_circle_outline_24 else R.drawable.ic_baseline_radio_button_unchecked_24
    // if the task is completed, return the purple color, otherwise return the black color
    fun imageColor(context: Context): Int = if(isCompleted()) purple(context) else black(context)
    private fun purple(context: Context) = ContextCompat.getColor(context, R.color.purple_500)
    private fun black(context: Context) = ContextCompat.getColor(context, R.color.black)

    companion object {
        // we use the ISO time format to store the time as per instructions in the tutorial from stackoverflow
        val timeFormatter: DateTimeFormatter = DateTimeFormatter.ISO_TIME
        val dateFormatter: DateTimeFormatter = DateTimeFormatter.ISO_DATE
    }
}